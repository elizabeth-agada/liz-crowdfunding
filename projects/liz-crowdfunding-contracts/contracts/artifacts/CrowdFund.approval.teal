#pragma version 10

// This TEAL was generated by TEALScript v0.100.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,address)void
*abi_route_createApplication:
	// beneficiary: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (beneficiary) for createApplication must be a address
	assert

	// targetAmount: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,address)void
	callsub createApplication
	int 1
	return

// createApplication(targetAmount: uint64, beneficiary: Address): void
createApplication:
	proto 2 0

	// contracts/HelloUser.algo.ts:13
	// this.targetAmount.value = targetAmount
	byte 0x746172676574416d6f756e74 // "targetAmount"
	frame_dig -1 // targetAmount: uint64
	app_global_put

	// contracts/HelloUser.algo.ts:14
	// this.beneficiary.value = beneficiary
	byte 0x62656e6566696369617279 // "beneficiary"
	frame_dig -2 // beneficiary: Address
	app_global_put

	// contracts/HelloUser.algo.ts:15
	// this.crowdFundOngoing.value = true
	byte 0x63726f776446756e644f6e676f696e67 // "crowdFundOngoing"
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put
	retsub

// payIntoCrowdFund(pay)void
*abi_route_payIntoCrowdFund:
	// paymentTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==

	// argument 0 (paymentTxn) for payIntoCrowdFund must be a pay transaction
	assert

	// execute payIntoCrowdFund(pay)void
	callsub payIntoCrowdFund
	int 1
	return

// payIntoCrowdFund(paymentTxn: PayTxn): void
payIntoCrowdFund:
	proto 1 0

	// contracts/HelloUser.algo.ts:19
	// assert(this.crowdFundOngoing.value, 'The crowd fund has to be going')
	byte 0x63726f776446756e644f6e676f696e67 // "crowdFundOngoing"
	app_global_get
	int 0
	getbit

	// The crowd fund has to be going
	assert

	// contracts/HelloUser.algo.ts:20
	// assert(paymentTxn.receiver === this.app.address, 'The receiver has to be the smart contract Address')
	frame_dig -1 // paymentTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// The receiver has to be the smart contract Address
	assert

	// contracts/HelloUser.algo.ts:21
	// assert(paymentTxn.amount > 0, 'The amount has to be greater than 0')
	frame_dig -1 // paymentTxn: PayTxn
	gtxns Amount
	int 0
	>

	// The amount has to be greater than 0
	assert

	// contracts/HelloUser.algo.ts:22
	// assert(paymentTxn.sender === this.txn.sender, 'The sender has to be the same as the')
	frame_dig -1 // paymentTxn: PayTxn
	gtxns Sender
	txn Sender
	==

	// The sender has to be the same as the
	assert

	// contracts/HelloUser.algo.ts:24
	// this.currentAmount.value = this.currentAmount.value + paymentTxn.amount
	byte 0x63757272656e74416d6f756e74 // "currentAmount"
	dup
	app_global_get
	frame_dig -1 // paymentTxn: PayTxn
	gtxns Amount
	+
	app_global_put

	// *if0_condition
	// contracts/HelloUser.algo.ts:26
	// this.currentAmount.value >= this.targetAmount.value
	byte 0x63757272656e74416d6f756e74 // "currentAmount"
	app_global_get
	byte 0x746172676574416d6f756e74 // "targetAmount"
	app_global_get
	>=
	bz *if0_end

	// *if0_consequent
	// contracts/HelloUser.algo.ts:27
	// this.crowdFundOngoing.value = false
	byte 0x63726f776446756e644f6e676f696e67 // "crowdFundOngoing"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

	// contracts/HelloUser.algo.ts:29
	// sendPayment({
	//         amount: this.app.address.balance,
	//         receiver: this.beneficiary.value,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/HelloUser.algo.ts:30
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts/HelloUser.algo.ts:31
	// receiver: this.beneficiary.value
	byte 0x62656e6566696369617279 // "beneficiary"
	app_global_get
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	retsub

// triggerWithdrawal()void
*abi_route_triggerWithdrawal:
	// execute triggerWithdrawal()void
	callsub triggerWithdrawal
	int 1
	return

// triggerWithdrawal(): void
triggerWithdrawal:
	proto 0 0

	// contracts/HelloUser.algo.ts:37
	// assert(this.txn.sender === this.app.creator, 'only the contract creator can trigger the withdrawal')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// only the contract creator can trigger the withdrawal
	assert

	// contracts/HelloUser.algo.ts:38
	// assert(this.crowdFundOngoing.value, 'The crowd fund has to be ongoing')
	byte 0x63726f776446756e644f6e676f696e67 // "crowdFundOngoing"
	app_global_get
	int 0
	getbit

	// The crowd fund has to be ongoing
	assert

	// contracts/HelloUser.algo.ts:40
	// this.terminateContract()
	callsub terminateContract
	retsub

// terminateContract(): void
terminateContract:
	proto 0 0

	// contracts/HelloUser.algo.ts:44
	// this.crowdFundOngoing.value = false
	byte 0x63726f776446756e644f6e676f696e67 // "crowdFundOngoing"
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	app_global_put

	// contracts/HelloUser.algo.ts:46
	// sendPayment({
	//       amount: this.app.address.balance,
	//       receiver: this.beneficiary.value,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/HelloUser.algo.ts:47
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts/HelloUser.algo.ts:48
	// receiver: this.beneficiary.value
	byte 0x62656e6566696369617279 // "beneficiary"
	app_global_get
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// viewTargetAmount9()address
*abi_route_viewTargetAmount9:
	// The ABI return prefix
	byte 0x151f7c75

	// execute viewTargetAmount9()address
	callsub viewTargetAmount9
	concat
	log
	int 1
	return

// viewTargetAmount9(): Address
viewTargetAmount9:
	proto 0 1

	// contracts/HelloUser.algo.ts:53
	// return this.beneficiary.value;
	byte 0x62656e6566696369617279 // "beneficiary"
	app_global_get
	retsub

*create_NoOp:
	method "createApplication(uint64,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "payIntoCrowdFund(pay)void"
	method "triggerWithdrawal()void"
	method "viewTargetAmount9()address"
	txna ApplicationArgs 0
	match *abi_route_payIntoCrowdFund *abi_route_triggerWithdrawal *abi_route_viewTargetAmount9

	// this contract does not implement the given ABI method for call NoOp
	err